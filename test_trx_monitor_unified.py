#!/usr/bin/env python3
"""
Test script for the updated TRX monitor service with unified amount/balance system
"""

import os
import sys
import logging
from decimal import Decimal

# Add paths for imports
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'shared'))

from shared.currency_precision import AmountConverter
from shared.trading_accounting import TradingAccountingService
from db.connection import get_session
from db.wallet import CryptoAddress, Transaction, Account, TransactionType, TransactionStatus
from db.accounting import JournalEntry, LedgerTransaction, AccountingAccount

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_trx_amount_conversion():
    """Test unified amount conversion for TRX"""
    print("üß™ Testing TRX unified amount conversion...")
    
    # Test TRX conversion (6 decimals, smallest unit = sun)
    trx_amount = Decimal("10.5")  # 10.5 TRX
    sun_amount = AmountConverter.to_smallest_units(trx_amount, "TRX")
    print(f"   10.5 TRX = {sun_amount} sun")
    
    # Convert back
    trx_back = AmountConverter.from_smallest_units(sun_amount, "TRX")
    print(f"   {sun_amount} sun = {trx_back} TRX")
    
    # Test formatting
    formatted = AmountConverter.format_display_amount(sun_amount, "TRX")
    print(f"   Formatted: {formatted}")
    
    assert trx_back == trx_amount, f"Conversion mismatch: {trx_back} != {trx_amount}"
    print("‚úÖ TRX amount conversion test passed")


def test_trx_accounting_service():
    """Test accounting service with TRX unified amounts"""
    print("\nüß™ Testing TRX accounting service...")
    
    try:
        session = get_session()
        accounting_service = TradingAccountingService(session)
        
        # Check if required accounts exist
        crypto_account = accounting_service.get_account_by_name("Crypto Assets - TRX")
        pending_account = accounting_service.get_account_by_name("Pending Trade Settlements")
        
        if crypto_account:
            print(f"   ‚úÖ Found TRX crypto account: {crypto_account.name}")
        else:
            print("   ‚ö†Ô∏è Crypto Assets - TRX account not found")
        
        if pending_account:
            print(f"   ‚úÖ Found pending account: {pending_account.name}")
        else:
            print("   ‚ö†Ô∏è Pending Trade Settlements account not found")
        
        print("‚úÖ TRX accounting service test completed")
        session.close()
        
    except Exception as e:
        print(f"‚ùå TRX accounting service test failed: {e}")


def test_trx_transaction_creation():
    """Test creating a TRX transaction with unified amounts"""
    print("\nüß™ Testing TRX transaction creation...")
    
    try:
        # Test values
        trx_amount = Decimal("5.25")  # 5.25 TRX
        sun_amount = AmountConverter.to_smallest_units(trx_amount, "TRX")
        
        # Create a test transaction (don't save to DB)
        test_tx = Transaction(
            account_id=1,  # Dummy account ID
            reference_id="test_trx_hash",
            amount=float(trx_amount),  # Backward compatibility
            amount_smallest_unit=sun_amount,  # Unified field
            type=TransactionType.DEPOSIT,
            status=TransactionStatus.AWAITING_CONFIRMATION,
            description="Test TRX transaction",
            blockchain_txid="0xtest_trx_123",
            confirmations=0,
            required_confirmations=20,
            address="TTest123Address",
            metadata_json={
                "amount_sun": str(sun_amount),
                "amount_trx": str(trx_amount),
                "currency": "TRX",
                "unified_system": True
            }
        )
        
        print(f"   Created TRX transaction with:")
        print(f"   - Amount: {AmountConverter.format_display_amount(sun_amount, 'TRX')}")
        print(f"   - Sun: {sun_amount}")
        print(f"   - Type: {test_tx.type}")
        print("‚úÖ TRX transaction creation test passed")
        
    except Exception as e:
        print(f"‚ùå TRX transaction creation test failed: {e}")


def test_trc20_conversion():
    """Test TRC20 token conversion (USDT example)"""
    print("\nüß™ Testing TRC20 USDT conversion...")
    
    try:
        # Test USDT conversion (6 decimals)
        usdt_amount = Decimal("100.50")  # 100.50 USDT
        usdt_smallest = AmountConverter.to_smallest_units(usdt_amount, "USDT")
        print(f"   100.50 USDT = {usdt_smallest} smallest units")
        
        # Convert back
        usdt_back = AmountConverter.from_smallest_units(usdt_smallest, "USDT")
        print(f"   {usdt_smallest} units = {usdt_back} USDT")
        
        # Test formatting
        formatted = AmountConverter.format_display_amount(usdt_smallest, "USDT")
        print(f"   Formatted: {formatted}")
        
        assert usdt_back == usdt_amount, f"USDT conversion mismatch: {usdt_back} != {usdt_amount}"
        print("‚úÖ TRC20 USDT conversion test passed")
        
    except Exception as e:
        print(f"‚ùå TRC20 conversion test failed: {e}")


def main():
    """Run all TRX tests"""
    print("üöÄ Testing TRX monitor unified system integration\n")
    
    try:
        test_trx_amount_conversion()
        test_trx_accounting_service()
        test_trx_transaction_creation()
        test_trc20_conversion()
        
        print("\nüéâ All TRX tests completed successfully!")
        print("\nüìã Summary of TRX monitor updates:")
        print("   ‚úÖ Updated to use AmountConverter for precise sun handling")
        print("   ‚úÖ Integrated with TradingAccountingService for automatic journal entries")
        print("   ‚úÖ Added accounting entry creation for TRX deposits and withdrawals")
        print("   ‚úÖ Maintains backward compatibility with existing amount fields")
        print("   ‚úÖ Uses unified smallest unit storage (sun for TRX, units for TRC20)")
        print("   ‚úÖ Enhanced TRC20 token support with unified precision")
        
    except Exception as e:
        print(f"\n‚ùå TRX test suite failed: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
