## XRP Integration Guide for DWT Backend

### XRP Overview

**Key Differences from Bitcoin/Litecoin:**
- **No Mining**: Uses consensus protocol instead of proof-of-work
- **Pre-mined**: All 100 billion XRP tokens were created at launch
- **Fast Transactions**: 3-5 second settlement times
- **Low Fees**: Typical transaction costs ~0.00001 XRP
- **Account Reserve**: Accounts require minimum 10 XRP balance
- **Destination Tags**: Used for exchange deposits (like memo fields)

### Integration Options

#### Option 1: XRPL Public API (Recommended)
**Pros:**
- No node setup required
- Free public endpoints available
- Well-documented REST and WebSocket APIs
- Reliable infrastructure maintained by Ripple

**Cons:**
- Dependent on third-party services
- Rate limiting on free tiers
- Less control over infrastructure

#### Option 2: Self-Hosted rippled Node
**Pros:**
- Full control over infrastructure
- No rate limits
- Direct access to XRPL data
- Can run validator (optional)
- More reliable for high-volume operations

**Cons:**
- Complex setup and maintenance
- Requires significant storage (~20-30GB current, grows ~2-5GB/year)
- Network bandwidth requirements (~10GB/month)
- Ongoing operational overhead
- Sync time: 2-6 hours for full history

**Storage Details:**
- **Full History**: ~25GB (all ledgers since 2012)
- **Recent Only**: ~5GB (configurable, e.g., last 6 months)
- **Growth Rate**: Much slower than Bitcoin (~2-5GB/year vs ~50GB/year)
- **Pruning**: Can delete old ledger data, keep only recent + account states

### Recommended Approach: Public API Integration

For DWT backend, we'll use public XRPL APIs for faster implementation and lower maintenance.

### 1. XRP Testnet Integration

**Testnet Details:**
- **Network**: XRPL Testnet
- **Public API**: `https://s.altnet.rippletest.net:51234`
- **WebSocket**: `wss://s.altnet.rippletest.net:51233`
- **Explorer**: https://testnet.xrpl.org
- **Faucet**: https://xrpl.org/xrp-testnet-faucet.html

### 2. Required Python Libraries

```bash
pip install xrpl-py requests websockets
```

### 3. XRP Address Generation

XRP uses different address formats:
- **Classic Address**: rN7n7otQDd6FczFgLdSqtcsAUxDkw6fzRH
- **X-Address**: X7AcgcsBL6XDcUb289X4mJ8djcdyKaB5hJDWMArnXr61cqZ (includes destination tag)

### 4. Account Requirements

**Minimum Reserve:**
- **Base Reserve**: 10 XRP (required for account activation)
- **Owner Reserve**: 2 XRP per owned object (trust lines, offers, etc.)
- **Transaction Fee**: ~0.00001 XRP per transaction

### 5. Transaction Types

**Common Operations:**
- **Payment**: Send XRP between accounts
- **TrustSet**: Create trust lines for tokens (not needed for native XRP)
- **OfferCreate**: Create buy/sell orders (DEX functionality)
- **AccountSet**: Modify account settings

### 6. Webhook Integration

**Transaction Monitoring:**
- Use WebSocket subscriptions for real-time updates
- Subscribe to account transactions
- Filter by transaction type and status

### 7. Security Considerations

**Key Management:**
- XRP uses secp256k1 keys (same as Bitcoin)
- Supports multi-signing for enhanced security
- Master key can be disabled after setting up regular keys

**Best Practices:**
- Use separate keys for different operations
- Implement proper key rotation
- Monitor account reserves and balances
- Validate destination tags for exchange deposits

### 8. Testing Strategy

**Testnet Workflow:**
1. Generate testnet accounts
2. Fund accounts using testnet faucet
3. Test payment transactions
4. Implement webhook monitoring
5. Test sweep functionality

### 9. Production Considerations

**Mainnet Migration:**
- **Mainnet API**: `https://xrplcluster.com` or `https://s1.ripple.com:51234`
- **WebSocket**: `wss://xrplcluster.com` or `wss://s1.ripple.com:51233`
- **Real XRP Required**: Minimum 10 XRP per account
- **Transaction Fees**: Real XRP costs for transactions

### 10. Integration Architecture

**Components Needed:**
1. **XRP Client**: API wrapper for XRPL interactions
2. **Address Generator**: HD wallet support for XRP addresses
3. **Transaction Monitor**: WebSocket-based transaction tracking
4. **Sweep Service**: Automated balance consolidation
5. **Reserve Management**: Handle minimum balance requirements

### 11. Comparison with Current Crypto Support

| Feature | Bitcoin/Litecoin | XRP |
|---------|------------------|-----|
| Node Setup | Required | Optional (API available) |
| Sync Time | Hours/Days | Instant (API) |
| Transaction Speed | 10min/2.5min | 3-5 seconds |
| Fees | Variable | Fixed (~0.00001 XRP) |
| Account Model | UTXO | Account-based |
| Minimum Balance | None | 10 XRP |
| Address Format | Base58/Bech32 | Base58 (different) |

### 12. Development Phases

**Phase 1: Basic Integration**
- XRP client with testnet support
- Address generation and validation
- Basic payment functionality

**Phase 2: Advanced Features**
- WebSocket transaction monitoring
- Sweep functionality integration
- Reserve balance management

**Phase 3: Production Ready**
- Mainnet support
- Enhanced error handling
- Performance optimization
- Comprehensive testing

### 13. Cost Analysis

**Development Costs:**
- **API Integration**: Low (free public APIs)
- **Maintenance**: Low (no node management)
- **Testing**: Low (free testnet)

**Operational Costs:**
- **Account Reserves**: 10 XRP per account (~$5-15 depending on XRP price)
- **Transaction Fees**: ~0.00001 XRP per transaction (negligible)
- **API Costs**: Free for basic usage, paid tiers for high volume

### Self-Hosted rippled Node Setup

## âœ… COMPLETED SETUP

Successfully deployed XRP testnet node with internet RPC access:

**Final Working Configuration:**
- Host: 104.248.77.43
- RPC Port: 5005 (HTTP)
- WebSocket Port: 6006 (WS)
- Status: Connected and syncing testnet
- RPC accessible via internet

**Node Configuration:**
- Ubuntu 20.04 VPS with rippled package
- Testnet configuration in `/etc/opt/ripple/rippled.cfg`
- RPC listening on all interfaces (0.0.0.0:5005)
- UFW firewall configured for ports 5005, 6006, 51235

**Integration Complete:**
- `/shared/crypto/clients/xrp_client.py` - Full-featured XRP client
- Updated with working node credentials (104.248.77.43:5005)
- Environment variables documented for .env file

## Environment Variables

Add to .env file:
```bash
# XRP Configuration
XRP_TESTNET_API_URL=http://104.248.77.43:5005
XRP_TESTNET_WS_URL=ws://104.248.77.43:6006
XRP_MAINNET_API_URL=https://xrplcluster.com
XRP_MAINNET_WS_URL=wss://xrplcluster.com
```

## Synchronization Monitoring

Check sync status:
```bash
# Check complete ledgers (sync progress)
curl -X POST http://104.248.77.43:5005 -d '{"method":"server_info","params":[{}]}' | jq .result.info.complete_ledgers

# Monitor server state
curl -X POST http://104.248.77.43:5005 -d '{"method":"server_info","params":[{}]}' | jq .result.info.server_state

# Full sync indicators:
# - complete_ledgers: continuous range (e.g., "1-32575")  
# - server_state: "tracking" or "full"
# - peers: stable count (8-15)
```

## Usage Example

```python
from shared.crypto.clients.xrp_client import create_xrp_testnet_client

# Create client (uses self-hosted node)
client = create_xrp_testnet_client()

# Create new wallet
wallet = client.create_wallet()
print(f"Address: {wallet['address']}")
print(f"Secret: {wallet['secret']}")

# Check balance
balance = client.get_balance(wallet['address'])
print(f"Balance: {balance} XRP")

# Send transaction (requires funded wallet)
tx_hash = client.send_transaction(
    from_secret=wallet['secret'],
    to_address="rDestinationAddress...",
    amount_xrp=10.0
)
```

## Node Management

```bash
# Check service status
sudo systemctl status rippled.service

# View logs
sudo journalctl -u rippled.service -f

# Restart if needed
sudo systemctl restart rippled.service

# Check network connectivity
sudo ss -tlnp | grep 5005
```

## Ready for Integration

- âœ… Self-hosted XRP testnet node operational
- âœ… Internet RPC access configured and tested
- âœ… XRP client updated with node credentials
- âœ… Same client interface patterns as Bitcoin/Litecoin
- ðŸ”„ Node syncing testnet blockchain (monitor progress)

**Next Steps:**
- Monitor sync completion
- Integrate with wallet service for XRP operations
- Add XRP support to trading and withdrawal systems

**5. Validators Configuration (`/etc/rippled/validators.txt`)**
```
# Ripple's validators (for mainnet)
[validator_list_sites]
https://vl.ripple.com

[validator_list_keys]
ED2677ABFFD1B33AC6FBC3062B71F1E8397C1505E1C42C64D11AD1B28FF73F4734
```

**6. Start and Enable Service**
```bash
sudo systemctl enable rippled
sudo systemctl start rippled
sudo systemctl status rippled
```

**7. Firewall Configuration**
```bash
# Peer-to-peer port
sudo ufw allow 51235

# RPC port (restrict to your IPs only!)
sudo ufw allow from YOUR_IP_ADDRESS to any port 5005

# WebSocket port (restrict to your IPs only!)
sudo ufw allow from YOUR_IP_ADDRESS to any port 5006
```

#### Monitoring and Management

**Check Sync Status**
```bash
# Local admin command
curl -X POST http://localhost:5005 -d '{"method":"server_info","params":[{}]}'

# Check if synced
rippled server_info | grep complete_ledgers
```

**Log Monitoring**
```bash
sudo tail -f /var/log/rippled/debug.log
```

**Storage Management**
```bash
# Check disk usage
du -sh /var/lib/rippled/

# Rotate logs
sudo logrotate /etc/logrotate.d/rippled
```

#### Security Considerations

**1. RPC Security**
- Restrict RPC access to specific IPs only
- Use firewall rules to block unauthorized access
- Consider VPN for remote access
- Never expose admin ports to internet

**2. System Security**
- Regular security updates
- SSH key authentication only
- Fail2ban for brute force protection
- Regular backups of configuration

**3. Network Security**
- Monitor unusual network activity
- Use intrusion detection systems
- Regular security audits

#### Performance Tuning

**For High Volume Operations**
```ini
# In rippled.cfg
[node_size]
huge

[ledger_history]
full  # For complete transaction history

# Increase connection limits
[overlay]
ip_limit = 0
```

**SSD Optimization**
```bash
# Add to /etc/fstab for SSD
/dev/sdb1 /var/lib/rippled ext4 defaults,noatime,discard 0 2
```

#### Testnet Configuration

**For Testnet Node**
```ini
# Add to rippled.cfg
[network_id]
1  # Testnet network ID

# Use testnet validators
[validator_list_sites]
https://vl.altnet.rippletest.net

[validator_list_keys]
ED264807102805220DA0F312E71FC2C69E1552C9C5790F6C25E3729DEB573D5860
```

### Node vs API Comparison for DWT Backend

| Aspect | Self-Hosted Node | Public API |
|--------|------------------|------------|
| **Setup Time** | 2-6 hours | Minutes |
| **Maintenance** | Ongoing | None |
| **Reliability** | Your responsibility | Provider managed |
| **Rate Limits** | None | Yes (but generous) |
| **Latency** | Local network | Internet dependent |
| **Cost** | Server costs | Free/paid tiers |
| **Control** | Full | Limited |
| **Scaling** | Manual | Automatic |

### Recommendation for DWT Backend

**Start with Public APIs** for faster development, then **migrate to self-hosted node** if you need:
- High transaction volumes (>1000 tx/hour)
- Sub-100ms response times
- Complete control over infrastructure
- Custom indexing or data processing

### Next Steps

1. Set up XRP testnet integration with public APIs
2. Create XRP client following same patterns as BTC/LTC clients
3. Implement address generation using HD wallets
4. Add transaction monitoring via WebSocket
5. Integrate with existing sweep and reserve systems
6. **Optional**: Set up self-hosted rippled node for production
