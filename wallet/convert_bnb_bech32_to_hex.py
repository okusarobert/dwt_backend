#!/usr/bin/env python3
"""
Script to convert existing bech32 BNB addresses to hex format in the database.
BNB uses Ethereum-style addresses (0x...) not bech32 format.
"""

import os
import sys
import logging
from sqlalchemy import text

# Add the project root to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from db.connection import get_session
from shared.crypto.HD import BNB
from Crypto.Hash import keccak

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def bech32_to_hex(bech32_address):
    """
    Convert bech32 BNB address to hex format.
    Since we don't have the original private key, we'll need to regenerate
    the address using the HD wallet system.
    """
    # For now, we'll mark these addresses as needing regeneration
    # since bech32 addresses shouldn't exist for BNB
    return None

def convert_bnb_addresses():
    """Convert bech32 BNB addresses to hex format"""
    session = get_session()
    
    try:
        # Find all BNB addresses that are in bech32 format (don't start with 0x)
        query = text("""
            SELECT id, address, account_id, currency_code, created_at 
            FROM crypto_addresses 
            WHERE currency_code = 'BNB' 
            AND address NOT LIKE '0x%'
        """)
        
        result = session.execute(query)
        bech32_addresses = result.fetchall()
        
        logger.info(f"Found {len(bech32_addresses)} BNB addresses in bech32 format")
        
        for row in bech32_addresses:
            address_id, bech32_addr, account_id, currency_code, created_at = row
            
            logger.info(f"Processing address ID {address_id}: {bech32_addr}")
            
            # Since bech32 addresses shouldn't exist for BNB, we need to regenerate
            # the address using the proper HD wallet system
            
            # For safety, we'll mark these addresses as inactive and create new ones
            # rather than trying to convert them directly
            
            # Mark the old address as inactive
            update_query = text("""
                UPDATE crypto_addresses 
                SET is_active = false, 
                    updated_at = NOW(),
                    memo = 'Deactivated - was in bech32 format, BNB uses hex addresses'
                WHERE id = :address_id
            """)
            
            session.execute(update_query, {"address_id": address_id})
            
            logger.info(f"Marked address {bech32_addr} as inactive")
            
            # Log that a new address needs to be generated for this account
            logger.warning(f"Account {account_id} needs a new BNB address generated via the wallet service")
        
        # Commit the changes
        session.commit()
        
        logger.info("‚úÖ Successfully processed all bech32 BNB addresses")
        
        if bech32_addresses:
            logger.info("\n" + "="*60)
            logger.info("IMPORTANT: The following accounts need new BNB addresses:")
            for row in bech32_addresses:
                _, bech32_addr, account_id, _, _ = row
                logger.info(f"  - Account ID {account_id} (old address: {bech32_addr})")
            logger.info("These can be generated by calling the deposit address endpoint")
            logger.info("="*60)
        
    except Exception as e:
        logger.error(f"Error converting BNB addresses: {e}")
        session.rollback()
        raise
    finally:
        session.close()

def verify_conversion():
    """Verify the conversion results"""
    session = get_session()
    
    try:
        # Check remaining BNB addresses
        query = text("""
            SELECT address, is_active, memo
            FROM crypto_addresses 
            WHERE currency_code = 'BNB'
            ORDER BY created_at
        """)
        
        result = session.execute(query)
        addresses = result.fetchall()
        
        logger.info(f"\nCurrent BNB addresses in database:")
        for addr, is_active, memo in addresses:
            status = "‚úÖ Active" if is_active else "‚ùå Inactive"
            format_type = "hex" if addr.startswith('0x') else "bech32"
            logger.info(f"  {addr} - {status} - {format_type}")
            if memo:
                logger.info(f"    Memo: {memo}")
        
    finally:
        session.close()

if __name__ == "__main__":
    logger.info("üöÄ Starting BNB address conversion from bech32 to hex format")
    
    try:
        convert_bnb_addresses()
        verify_conversion()
        
        logger.info("\n‚úÖ BNB address conversion completed successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Conversion failed: {e}")
        sys.exit(1)
