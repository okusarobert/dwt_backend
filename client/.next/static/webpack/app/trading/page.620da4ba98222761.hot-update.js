"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/trading/page",{

/***/ "(app-pages-browser)/./lib/api-client.ts":
/*!***************************!*\
  !*** ./lib/api-client.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/.pnpm/axios@1.11.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var _cookie_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cookie-auth */ \"(app-pages-browser)/./lib/cookie-auth.ts\");\n\n\nclass ApiClient {\n    setupInterceptors() {\n        // Add auth header interceptor\n        this.authClient.interceptors.request.use(async (config)=>{\n            // For HTTP-only cookies, we don't need to manually add headers\n            // The browser will automatically include cookies\n            return config;\n        }, (error)=>{\n            return Promise.reject(error);\n        });\n        // Reuse same interceptors for admin client if ever separated\n        this.walletClient.interceptors.request.use(async (config)=>{\n            // For HTTP-only cookies, we don't need to manually add headers\n            // The browser will automatically include cookies\n            return config;\n        }, (error)=>{\n            return Promise.reject(error);\n        });\n        // Handle response errors\n        this.authClient.interceptors.response.use((response)=>response, async (error)=>{\n            var _error_response;\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n                // Clear auth state on 401\n                await _cookie_auth__WEBPACK_IMPORTED_MODULE_0__.cookieAuth.removeAuthCookie();\n            }\n            return Promise.reject(error);\n        });\n        this.walletClient.interceptors.response.use((response)=>response, async (error)=>{\n            var _error_response;\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n                // Clear auth state on 401\n                await _cookie_auth__WEBPACK_IMPORTED_MODULE_0__.cookieAuth.removeAuthCookie();\n            }\n            return Promise.reject(error);\n        });\n    }\n    async login(credentials) {\n        const response = await this.authClient.post(\"/login\", credentials);\n        return response.data;\n    }\n    async register(userData) {\n        try {\n            const response = await this.authClient.post(\"/register\", userData);\n            // Backend returns {\"message\": \"User registered successfully\"} with status 201\n            // We need to handle this response format\n            if (response.status === 201) {\n                return {\n                    message: response.data.message || \"User registered successfully\",\n                    user: undefined\n                };\n            }\n            return response.data;\n        } catch (error) {\n            var _error_response, _error_response1;\n            console.error(\"Registration failed:\", error);\n            // Handle different error status codes\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 400) {\n                var _error_response2;\n                // Validation errors or bad request\n                if (((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data) && typeof error.response.data === \"object\") {\n                    throw new Error(JSON.stringify(error.response.data));\n                }\n                throw new Error(\"Invalid registration data\");\n            } else if (((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 500) {\n                // Internal server error\n                throw new Error(\"Internal server error. Please try again later.\");\n            } else {\n                // Other errors\n                throw new Error(\"Registration failed. Please try again.\");\n            }\n        }\n    }\n    async logout() {\n        try {\n            await this.authClient.post(\"/logout\");\n            await _cookie_auth__WEBPACK_IMPORTED_MODULE_0__.cookieAuth.removeAuthCookie();\n            return true;\n        } catch (error) {\n            console.error(\"Logout failed:\", error);\n            return false;\n        }\n    }\n    async isAuthenticated() {\n        return await _cookie_auth__WEBPACK_IMPORTED_MODULE_0__.cookieAuth.isAuthenticated();\n    }\n    async getCurrentUser() {\n        try {\n            const decodedToken = await _cookie_auth__WEBPACK_IMPORTED_MODULE_0__.cookieAuth.getDecodedToken();\n            if (decodedToken) {\n                // Return basic user info from token\n                return {\n                    id: decodedToken.user_id,\n                    email: \"\",\n                    first_name: \"\",\n                    last_name: \"\",\n                    role: \"user\"\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Failed to get current user:\", error);\n            return null;\n        }\n    }\n    async getUserConfig() {\n        try {\n            const response = await this.authClient.get(\"/user-config\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to get user config:\", error);\n            return null;\n        }\n    }\n    // Wallet-specific methods\n    async getDashboardSummary() {\n        const response = await this.walletClient.get(\"/wallet/dashboard/summary\");\n        return response.data;\n    }\n    async getWalletBalance() {\n        const response = await this.walletClient.get(\"/wallet/balance\");\n        return response.data;\n    }\n    async getTransactionHistory() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5, offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        const response = await this.walletClient.get(\"/wallet/transactions\", {\n            params: {\n                limit,\n                offset\n            }\n        });\n        return response.data;\n    }\n    // ------------------------------\n    // Admin: Users\n    // ------------------------------\n    async adminListUsers(params) {\n        // Map UI params to backend params\n        const mapped = {\n            ...params || {}\n        };\n        if (mapped.q) {\n            mapped.email = mapped.q;\n            delete mapped.q;\n        }\n        if (mapped.role) {\n            mapped.role = String(mapped.role).toUpperCase();\n        }\n        const response = await this.adminClient.get(\"/admin/users\", {\n            params: mapped\n        });\n        const data = response.data || {};\n        const items = Array.isArray(data === null || data === void 0 ? void 0 : data.items) ? data.items : Array.isArray(data) ? data : [];\n        var _params_page;\n        const page = typeof (data === null || data === void 0 ? void 0 : data.page) === \"number\" ? data.page : (_params_page = params === null || params === void 0 ? void 0 : params.page) !== null && _params_page !== void 0 ? _params_page : 1;\n        var _params_page_size, _ref;\n        const page_size = typeof (data === null || data === void 0 ? void 0 : data.page_size) === \"number\" ? data.page_size : (_ref = (_params_page_size = params === null || params === void 0 ? void 0 : params.page_size) !== null && _params_page_size !== void 0 ? _params_page_size : items.length) !== null && _ref !== void 0 ? _ref : 0;\n        const total = typeof (data === null || data === void 0 ? void 0 : data.total) === \"number\" ? data.total : Array.isArray(items) ? items.length : 0;\n        return {\n            success: true,\n            data: items,\n            pagination: {\n                page,\n                page_size,\n                total\n            }\n        };\n    }\n    async adminGetUser(userId) {\n        const response = await this.adminClient.get(\"/admin/users/\".concat(userId));\n        return {\n            success: true,\n            data: response.data\n        };\n    }\n    async adminUpdateUser(userId, patch) {\n        const body = {\n            ...patch || {}\n        };\n        if (body.default_currency) {\n            body.currency = body.default_currency;\n            delete body.default_currency;\n        }\n        if (body.role) {\n            body.role = String(body.role).toUpperCase();\n        }\n        const response = await this.adminClient.patch(\"/admin/users/\".concat(userId), body);\n        return {\n            success: true,\n            data: response.data\n        };\n    }\n    // ===== PORTFOLIO ENDPOINTS =====\n    /**\n   * Get portfolio summary for the authenticated user\n   */ async getPortfolioSummary() {\n        try {\n            const response = await this.walletClient.get(\"/wallet/portfolio/summary\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching portfolio summary:\", error);\n            throw error;\n        }\n    }\n    // =============================\n    async getReserveStatus() {\n        const response = await this.walletClient.get(\"/wallet/reserves/status\");\n        const data = response.data;\n        const reserves = data === null || data === void 0 ? void 0 : data.reserves;\n        // Always normalize to simple array shape for the UI\n        const items = [];\n        if (Array.isArray(reserves)) {\n            // Backend already returns array; coerce account entries\n            for (const entry of reserves){\n                var _entry_currency;\n                const currency = String((_entry_currency = entry === null || entry === void 0 ? void 0 : entry.currency) !== null && _entry_currency !== void 0 ? _entry_currency : \"\");\n                const accs = Array.isArray(entry === null || entry === void 0 ? void 0 : entry.accounts) ? entry.accounts : [];\n                const simpleAccs = accs.map((acc)=>{\n                    const i = acc || {};\n                    var _i_account_type, _ref;\n                    const account_type = String((_ref = (_i_account_type = i.account_type) !== null && _i_account_type !== void 0 ? _i_account_type : i.type) !== null && _ref !== void 0 ? _ref : \"\").toUpperCase();\n                    const balance = typeof i.total_balance === \"number\" ? i.total_balance : typeof i.available_balance === \"number\" ? i.available_balance : typeof i.balance === \"number\" ? i.balance : 0;\n                    const available = typeof i.available_balance === \"number\" ? i.available_balance : undefined;\n                    const locked = typeof i.locked_balance === \"number\" ? i.locked_balance : undefined;\n                    return {\n                        account_type,\n                        balance,\n                        available,\n                        locked\n                    };\n                });\n                items.push({\n                    currency,\n                    accounts: simpleAccs\n                });\n            }\n        } else {\n            // Normalize from grouped object shape { crypto: {CUR: info}, fiat: {CUR: info} }\n            const pushFromGroup = (group, accountType)=>{\n                if (!group || typeof group !== \"object\") return;\n                Object.entries(group).forEach((param)=>{\n                    let [currency, info] = param;\n                    const i = info || {};\n                    const balance = typeof i.total_balance === \"number\" ? i.total_balance : typeof i.available_balance === \"number\" ? i.available_balance : typeof i.balance === \"number\" ? i.balance : 0;\n                    const available = typeof i.available_balance === \"number\" ? i.available_balance : undefined;\n                    const locked = typeof i.locked_balance === \"number\" ? i.locked_balance : undefined;\n                    let item = items.find((x)=>x.currency === currency);\n                    if (!item) {\n                        item = {\n                            currency,\n                            accounts: []\n                        };\n                        items.push(item);\n                    }\n                    item.accounts.push({\n                        account_type: accountType,\n                        balance,\n                        available,\n                        locked\n                    });\n                });\n            };\n            pushFromGroup(reserves === null || reserves === void 0 ? void 0 : reserves.crypto, \"CRYPTO\");\n            pushFromGroup(reserves === null || reserves === void 0 ? void 0 : reserves.fiat, \"FIAT\");\n        }\n        var _data_success;\n        return {\n            success: (_data_success = data === null || data === void 0 ? void 0 : data.success) !== null && _data_success !== void 0 ? _data_success : true,\n            reserves: items\n        };\n    }\n    async getReserveBalance(currency, accountType) {\n        const response = await this.walletClient.get(\"/wallet/reserves/\".concat(currency, \"/\").concat(accountType, \"/balance\"));\n        const data = response.data || {};\n        const b = data.balance;\n        let numeric = 0;\n        if (typeof b === \"number\") {\n            numeric = b;\n        } else if (b && typeof b === \"object\") {\n            const i = b;\n            if (typeof i.total_balance === \"number\") numeric = i.total_balance;\n            else if (typeof i.available_balance === \"number\") numeric = i.available_balance;\n            else if (typeof i.balance === \"number\") numeric = i.balance;\n        }\n        return {\n            success: Boolean(data.success),\n            balance: numeric\n        };\n    }\n    async topUpReserve(currency, accountType, amount, source_reference) {\n        const response = await this.walletClient.post(\"/wallet/reserves/\".concat(currency, \"/\").concat(accountType, \"/topup\"), {\n            amount,\n            source_reference\n        });\n        return response.data;\n    }\n    async withdrawFromReserve(currency, accountType, amount, destination_reference) {\n        const response = await this.walletClient.post(\"/wallet/reserves/\".concat(currency, \"/\").concat(accountType, \"/withdraw\"), {\n            amount,\n            destination_reference\n        });\n        return response.data;\n    }\n    async getReserveAnalytics() {\n        let period_days = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30;\n        const response = await this.walletClient.get(\"/wallet/reserves/analytics\", {\n            params: {\n                period_days\n            }\n        });\n        return response.data;\n    }\n    async clearReserveCache() {\n        const response = await this.walletClient.post(\"/wallet/reserves/cache/clear\");\n        return response.data;\n    }\n    // Trading endpoints\n    async calculateTrade(tradeType, cryptoCurrency, amount) {\n        const response = await this.walletClient.post(\"/api/trading/\".concat(tradeType, \"/calculate\"), {\n            crypto_currency: cryptoCurrency,\n            amount: amount\n        });\n        return response.data;\n    }\n    async executeTrade(tradeType, cryptoCurrency, amount, phoneNumber) {\n        const response = await this.walletClient.post(\"/api/trading/\".concat(tradeType), {\n            crypto_currency: cryptoCurrency,\n            amount: amount,\n            phone_number: phoneNumber\n        });\n        return response.data;\n    }\n    async getTradeHistory() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 50, offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        const response = await this.walletClient.get(\"/api/trading/history\", {\n            params: {\n                limit,\n                offset\n            }\n        });\n        return response.data;\n    }\n    constructor(){\n        // Auth service client\n        this.authClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            baseURL: \"\".concat(\"http://localhost:3030\", \"/api/v1\"),\n            withCredentials: true,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        // Wallet service client\n        this.walletClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            baseURL: \"\".concat(\"http://localhost:3030\", \"/api/v1\"),\n            withCredentials: true,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        // Admin routes share same base; endpoints start with /admin\n        this.adminClient = this.walletClient;\n        this.setupInterceptors();\n    }\n}\nconst apiClient = new ApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-client.ts\n"));

/***/ })

});